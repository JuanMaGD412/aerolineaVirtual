package com.udea.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AeropuertoAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAeropuertoAllPropertiesEquals(Aeropuerto expected, Aeropuerto actual) {
        assertAeropuertoAutoGeneratedPropertiesEquals(expected, actual);
        assertAeropuertoAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAeropuertoAllUpdatablePropertiesEquals(Aeropuerto expected, Aeropuerto actual) {
        assertAeropuertoUpdatableFieldsEquals(expected, actual);
        assertAeropuertoUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAeropuertoAutoGeneratedPropertiesEquals(Aeropuerto expected, Aeropuerto actual) {
        assertThat(actual)
            .as("Verify Aeropuerto auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAeropuertoUpdatableFieldsEquals(Aeropuerto expected, Aeropuerto actual) {
        assertThat(actual)
            .as("Verify Aeropuerto relevant properties")
            .satisfies(a -> assertThat(a.getCodigo()).as("check codigo").isEqualTo(expected.getCodigo()))
            .satisfies(a -> assertThat(a.getNombre()).as("check nombre").isEqualTo(expected.getNombre()))
            .satisfies(a -> assertThat(a.getCiudad()).as("check ciudad").isEqualTo(expected.getCiudad()))
            .satisfies(a -> assertThat(a.getPais()).as("check pais").isEqualTo(expected.getPais()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAeropuertoUpdatableRelationshipsEquals(Aeropuerto expected, Aeropuerto actual) {
        // empty method
    }
}
